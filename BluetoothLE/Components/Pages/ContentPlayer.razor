@page "/content-player/{content?}"
@using Blazor.Bluetooth
@using BluetoothLE.Components.Views
@using BluetoothLE.Models.ContentLibrary
@using BluetoothLE.Utilities
@using Microsoft.AspNetCore.Html
@using Dynastream.Fit;
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@using MongoDB.Driver
@inject IJSRuntime jsRuntime
@inject IConfiguration Configuration
@inject IDbContextFactory<Models.AthleteContext> DbFactory
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<ContentPlayer> Logger
@inject Utilities.StravaOAuth OAuth
@inject Utilities.BluetoothHandler BluetoothHandler
@inject BluetoothLE.Services.SufferService Suffer
@inject Utilities.IntervalsUploader Intervals
@implements IAsyncDisposable
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Content Player</PageTitle>

<style type="text/css">
    /* track */
    input[type=range] {
    -webkit-appearance: none; /* Hides the slider so that custom slider can be made */
    width: 100%; /* Specific width is required for Firefox. */
    background: transparent; /* Otherwise white in Chrome */
    height: 100%;
    }

    input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
    }

    input[type=range]:focus {
    outline: none; /* Removes the blue border. You should probably do some kind of focus styling for accessibility reasons though. */
    }

    input[type=range]::-ms-track {
    width: 100%;
    cursor: pointer;
    /* Hides the slider so custom styles can be added */
    background: transparent;
    border-color: transparent;
    color: transparent;
    }

    /* thumb */
    input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
    border: 1px solid yellow;
    height: 100px;
    width: 1px;
    cursor: pointer;
    margin-top: 0;
    }
    input[type=range].plain::-webkit-slider-thumb {
    height: 32px;
    }
    body
    {
    cursor: none;
    }
    body:has(#paused)
    {
    cursor: pointer;
    }
    div#paused
    {
    content: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 320 512'><path fill='white' d='M48 64C21.5 64 0 85.5 0 112L0 400c0 26.5 21.5 48 48 48l32 0c26.5 0 48-21.5 48-48l0-288c0-26.5-21.5-48-48-48L48 64zm192 0c-26.5 0-48 21.5-48 48l0 288c0 26.5 21.5 48 48 48l32 0c26.5 0 48-21.5 48-48l0-288c0-26.5-21.5-48-48-48l-32 0z'/></svg>");
    position: fixed;
    top: calc(50% - 64px);
    left: calc(50% - 64px);
    width: 128px;
    }
</style>

@if (_timelineController.IsPaused)
{
    <button style="left: 4px; top: 4px; z-index:20000" onclick="@BluetoothHandler.ConnectAsync">Connect to BLE</button>

    if (IsAuthenticated)
    {
        <button id="strava-upload" onclick="@UploadAsync" style="z-index: 20000; right: 4px; left: unset; background-color: rgb(215 70 0); color: white; padding-left: 8px; padding-right: 8px; top: 4px"><i class="fa-brands fa-strava"></i></button>
    }
}

<div >

    <BlazoredVideo @ref="video" EndedEvent="PlaybackEndedAsync">
    </BlazoredVideo>

    <div id="playback-toggle" @onclick="@(async e => await TogglePlaybackAsync())"></div>

    <style type="text/css">
        .indicator {
        stroke: yellow;
        stroke-width: 1px;
        z-index: 100;
        display: none;
        stroke: red;
        }

        #playback-toggle
        {
        position: absolute;
        width: 100%;
        height: calc(100% - 100px);
        z-index: 10000;
        }
    </style>

    <article>
        @if (videoHandler is not null && videoHandler.Story(_timelineController.CurrentMilliseconds) is StorylineParameters parameters)
        {
            <StoryLine Parameters="parameters" />
        }
    </article>

    @if (whip is StorylineParameters whipObject)
    {
        <div id="whip"><div>@whipObject.Text.En</div></div>
    }

    <div id="workout-display">
        @if (workoutType != WorkoutType.NoTargets)
        {
            if (currentTargets is WorkoutParameters targets)
            {
                var currentPower = FromParameters(targets).Value;
                var currentCadence = targets.Rpm?.Value ?? 0;

                <div id="heart-rate" class="target-grid">
                    <div class="current-value">@FromInt(actualHeartRate)</div>
                    <div class="current-icon"><i class="fa-light fa-heart icon"></i></div>
                    <div class="target-value"></div>
                    <div class="upcoming-value"></div>
                </div>
                <div id="power" class="target-grid">
                    <div class="target-value">@currentPower</div>
                    <UpcomingValue CurrentTarget="currentPower" CurrentPosition="_timelineController.CurrentMilliseconds"
                    Parameters="effortChangeObject" UpcomingParameters="upcomingTargets"
                    GetUpcoming="(parameters) => FromParameters(parameters).Value"></UpcomingValue>
                    <div class="current-value" style="background-color: @ColorDiff(currentPower, actualPower ?? 0, 10)">@FromInt(actualPower)</div>
                    <div class="current-icon"><i class="fa-light fa-bolt icon"></i></div>
                </div>
                <div id="cadence" class="target-grid">
                    <div class="target-value">@currentCadence</div>
                    <UpcomingValue CurrentTarget="currentCadence" CurrentPosition="_timelineController.CurrentMilliseconds"
                    Parameters="effortChangeObject" UpcomingParameters="upcomingTargets"
                    GetUpcoming="(parameters => parameters.Rpm?.Value ?? 0)"></UpcomingValue>
                    <div class="current-value" style="background-color: @ColorDiff(currentCadence, actualCadence ?? 0, 5)">@FromInt(actualCadence)</div>
                    <div class="current-icon"><i class="fa-light fa-sync icon"></i></div>
                </div>
                <div id="graph-container">
                    @if (_timelineController.IsPaused)
                    {
                        <div id="paused"></div>

                        <div id="graph" style="position:relative">
                            @if (workoutBuilder is not null)
                            {
                                <input type="range" id="seek-bar" disabled="@(_timelineController.IsPaused is false)" @bind="SeekBarPosition" @bind:after="ChangePositionAsync" min="0" max="@workoutBuilder.Width" style="width:@(workoutBuilder.Width / 4)px; position: relative; z-index: 1000" />

                                <svg style="position: absolute; top: 0; left: 0" width="@workoutBuilder.Width" height="@workoutBuilder.Height" viewBox="0 0 @workoutBuilder.Width @workoutBuilder.Height">
                                    <!--<rect width="@workoutBuilder.Width" height="@workoutBuilder.Height" x="0" y="0" fill="cyan" />-->
                                    <g>
                                        @foreach (var item in workoutBuilder.Paths())
                                        {
                                            <path d="@item.Fill" fill="@item.Colour" fill-opacity="1" stroke="none" class="@item.Class"></path>
                                        }
                                    </g>
                                </svg>
                            }
                        </div>
                    }
                    else
                    {
                        <div id="graph" style="position:relative">
                            @if (workoutBuilder is not null)
                            {
                                // Alternatively, pass the list and current chunks to `GraphBuilder`, and it
                                // generates the entire list of paths in a single call... this might also
                                // avoid potential loss of precision errors, since the offset is currently an
                                // int, and is being divided by `ScaleFactor` (currently hardcoded as 4)
                                double AbsoluteOffset = 0;
                                double Offset = 0;
                                double Width = 0;

                                @foreach (var chunk in _timelineController.TimelineChunks)
                                {
                                    (Offset, Width) = chunk.GetOffsetAndLength(workoutBuilder.Width);

                                    Width /= 4;

                                    <svg style="position: absolute; top: 0; left: @AbsoluteOffset" width="@Width" height="@workoutBuilder.Height" viewBox="0 0 @Width @workoutBuilder.Height">
                                        <!--<rect width="@Width" height="@workoutBuilder.Height" x="0" y="0" fill="cyan" />-->
                                        <g>
                                            @foreach (var item in workoutBuilder.Paths(chunk, true))
                                            {
                                                <path d="@item.Fill" fill="@item.Colour" fill-opacity="1" stroke="none" class="@item.Class"></path>
                                            }
                                        </g>
                                    </svg>

                                    AbsoluteOffset += Width;
                                }

                                (Offset, Width) = _timelineController.CurrentChunk.GetOffsetAndLength(workoutBuilder.Width);

                                Width /= 4;

                                <svg style="position: absolute; top: 0; left: @AbsoluteOffset" width="@Width" height="@workoutBuilder.Height" viewBox="0 0 @Width @workoutBuilder.Height">
                                    <!--<rect width="@Width" height="@workoutBuilder.Height" x="0" y="0" fill="yellow"/>-->
                                    <g>
                                        @foreach (var item in workoutBuilder.Paths(_timelineController.CurrentChunk, true))
                                        {
                                            <path d="@item.Fill" fill="@item.Colour" fill-opacity="1" stroke="none" class="@item.Class"></path>
                                        }
                                    </g>
                                </svg>

                                double totalWidth = AbsoluteOffset + Width;

                                <input type="range" id="seek-bar" disabled="@(_timelineController.IsPaused is false)" @bind="SeekBarPosition" @bind:after="ChangePositionAsync" min="0" max="@(totalWidth * 4)" style="width:@(totalWidth)px; position: relative; z-index: 1000" />
                            }
                        </div>

                        <div id="hr-graph">
                            <svg width="@heartRateGraph.Width" height="@heartRateGraph.Height" viewBox="0 0 @heartRateGraph.Width @heartRateGraph.Height">
                                <path d="@heartRateGraph.Path" fill="none" stroke="@heartRateGraph.Colour"></path>
                            </svg>
                        </div>
                        <div id="power-graph">
                            <svg width="@powerGraph.Width" height="@powerGraph.Height" viewBox="0 0 @powerGraph.Width @powerGraph.Height">
                                <path d="@powerGraph.Path" fill="none" stroke="@powerGraph.Colour"></path>
                            </svg>
                        </div>
                    }
                    <div id="elapsed-time">@FormatTimeSpan(_timelineController.TotalTime)</div>
                    <div id="track-remaining-time"><div>@FormatTimeSpan(trackRemainingTime)</div></div>
                    <div id="total-remaining-time">@FormatTimeSpan(workoutRemainingTime)</div>
                </div>
            }
        }
        else
        {
            <style type="text/css">
                #progress {
                background-color: deepskyblue;
                }

                div#workout-display {
                grid-template-rows: calc(32pt + 16px) 32px;
                }

                div#elapsed-time {
                grid-row: 1;
                }

                div#total-remaining-time {
                grid-row: 1;
                grid-column: -1;
                }

                div#progress {
                grid-row: 2;
                grid-column: 1 / 7;
                }
            </style>

            @if (_timelineController.IsPaused)
            {
                <div id="paused"></div>
                <input type="range" id="seek-bar" class="plain" @bind="SeekBarPosition" @bind:after="ChangePositionAsync" min="0" max="@(TotalWorkoutLength / 1000)" style="grid-row: 2; grid-column: 1 / 7; z-index:1000" />
            }

            <div id="elapsed-time">@FormatTimeSpan(_timelineController.TotalTime)</div>
            <div id="total-remaining-time">@FormatTimeSpan(workoutRemainingTime)</div>
            <div id="progress" style="width: @($"{percentComplete:F2}")%"></div>
        }
    </div>
</div>

<audio id="effort_increase" src="sounds/effort_increase.mp3"></audio>
<audio id="effort_decrease" src="sounds/effort_decrease.mp3"></audio>
<audio id="effort_change_coming" src="sounds/effort_change_coming.mp3"></audio>
<audio id="attack" src="sounds/attack.mp3"></audio>
<audio id="slide_in" src="sounds/slide_in.mp3"></audio>
<audio id="slide_out" src="sounds/slide_out.mp3"></audio>
<audio id="stand" src="sounds/stand.mp3"></audio>
<audio id="surge" src="sounds/surge.mp3"></audio>

<script type="text/javascript">
    console.log("setting up sound effect init function...");
    window.audioTracks = {};
    window.setupSoundEffects = () => {
    document.querySelectorAll('audio').forEach((audioElement) => {
    console.log("initializing sound effects");

    const id = audioElement.id;

    let context = new AudioContext();
    let track = context.createMediaElementSource(audioElement);

    track.connect(context.destination);

    window.audioTracks[id] = { element: audioElement, context, track };
    });

    window.playSoundEffect = (id) => window.audioTracks[id].element.play();
    }

    console.log("trying to enter fullscreen...");
    document.documentElement.requestFullscreen({ navigationUI: "hide" })
    .then(() => { console.log("entered fullscreen") })
    .catch((err) => { console.log(`failed to enter fullscreen: ${err.message}`) });
</script>

@code {
    [Parameter]
    public string Content { get; set; } = "Indoor Cycling";

    enum WorkoutType { Standard, NoVid, NoTargets }

    WorkoutType workoutType = WorkoutType.Standard;

    WorkoutParameters? currentTargets = null;
    WorkoutParameters? upcomingTargets = null;
    StorylineParameters? whip = null;
    Object<WorkoutParameters>? effortChangeObject = null;

    TimeSpan workoutRemainingTime = TimeSpan.Zero;
    TimeSpan trackRemainingTime = TimeSpan.Zero;

    MarkupString FromInt(int? value) => value is null ? new MarkupString("&mdash;") : new MarkupString($"{value.Value}");

    TimelineController _timelineController = new();

    Blazored.Video.BlazoredVideo video = null!;

    private int SeekBarPosition { get; set; } = 0;

    PeriodicTimer? _timer;
    Task? _timerTask;
    bool _disposed = false;

    bool initSoundEffects = false;

    Utilities.FitFileHandler? _fitFileHandler;

    Dynastream.Fit.Sport _sport = Sport.Cycling;
    Dynastream.Fit.SubSport _subSport = SubSport.IndoorCycling;

    private SVGLineBuilder heartRateGraph = new SVGLineBuilder(100, "rgb(255 0 0)", 200);
    private SVGLineBuilder cadenceGraph = new SVGLineBuilder(100, "rgb(0 0 255)", 200);
    private SVGLineBuilder powerGraph = null!;

    private GraphBuilder<WorkoutItem>? workoutBuilder = null;

    int? actualHeartRate = null;
    int? actualCadence = null;
    int? actualPower = null;

    private MemoryStream? _memoryStream;

    private IReadOnlyList<WorkoutTrigger> workoutJson = [];

    private bool IsAuthenticated { get; set; } = false;

    ContentHandler.VideoHandler? videoHandler = null;
    ContentHandler.WorkoutHandler? workoutHandler = null;

    private string ContentName { get; set; } = "Indoor Cycling";

    private int lastLength = 0;

    private Models.Stats? AthleteStats { get; set; }

    double percentComplete = 0;

    Models.ContentLibrary.Content ContentItem = null!;

    int TotalWorkoutLength = 0;

    private string ColorDiff(int currentTarget, int actualValue, int safeValue)
    {
        int diff = currentTarget - actualValue;

        if (Math.Abs(diff) <= safeValue)
        {
            return "none";
        }

        if (diff > (safeValue * 10)) diff = safeValue * 10;
        if (diff < (safeValue * -10)) diff = safeValue * -10;

        double percentage = Math.Abs((double)diff) / (double)(safeValue * 10);

        if (diff > 0)
        {
            int red = (int)(255 * percentage);
            return $"rgb({red} 0 0 / 50%)";
        }
        else
        {
            int blue = (int)(255 * percentage);
            int green = (int)(127 * percentage);
            return $"rgb(0 {green} {blue} / 50%)";
        }
    }

    async Task ChangePositionAsync()
    {
        if (_timelineController.IsPaused is false)
        {
            Console.WriteLine($"Skipping changing position, currently playing...");
            return;
        }

        Console.WriteLine($"New position: {SeekBarPosition}");

        // Should there be a controller class that handles all of this?
        _timelineController.Reposition(SeekBarPosition);

        await video.SetCurrentTimeAsync(SeekBarPosition);

        // Other things to do:
        // - Set record of stop time to all zero values
        // - Create lap marker
        // - Create a record of start time to all zero values?
        //   This might be better handled in the play/pause logic?
        //   Unfortunately, currently, as soon as set position, playback resumes... need to fix that

        Console.WriteLine($"Resetting timelines for sync...");

        workoutHandler?.ResetTimelines();
        videoHandler?.ResetTimelines();

        // More things to consider:
        // - Updating the workout graph to cut out skipped over blocks
        // - Updating the workout graph to insert repeated blocks
        // - Updating the data graphs to the new length so it's not overwriting existing graph data

        // With the above, we can't use video position for some of the indexing...
    }

    async Task TogglePlaybackAsync()
    {
        try
        {
            if (initSoundEffects is false)
            {
                initSoundEffects = true;

                await jsRuntime.InvokeVoidAsync("setupSoundEffects");
            }

            Console.WriteLine("Toggling workout...");

            if (_timer is null)
            {
                Logger.LogError("Unable to toggle playback state, have no timer!");

                return;
            }

            if (_timerTask is null)
            {
                _timerTask = UpdateState();
            }

            var src = await video.GetCurrentSrcAsync();

            if (string.IsNullOrEmpty(await video.GetCurrentSrcAsync()))
            {
                if (_timelineController.IsPaused)
                {
                    _timelineController.Start();

                    _timer.Period = TimeSpan.FromMilliseconds(100);

                    if (_fitFileHandler is null)
                    {
                        _fitFileHandler = new(ContentName, _sport, _subSport);
                    }
                }
                else
                {
                    _timelineController.Pause();
                }
            }
            else
            {

                if (await video.GetPausedAsync())
                {
                    _timelineController.Start();

                    // TODO: Doesn't fail until here, where no video source is actually configured...
                    await video.StartPlayback();

                    _timer.Period = TimeSpan.FromMilliseconds(100);

                    if (_fitFileHandler is null)
                    {
                        _fitFileHandler = new(ContentName, _sport, _subSport);
                    }
                }
                else
                {
                    _timelineController.Pause();

                    await video.PausePlayback();
                }
            }
        } catch (Exception exn)
        {
            Logger.LogError($"Unable to toggle playback: {exn.Message}");
            Logger.LogError($"Stack Trace: {exn.StackTrace}");
        }
    }

    private async Task PlaybackEndedAsync(Blazored.Video.Support.VideoState state)
    {
        Logger.LogInformation("Playback has ended, closing fit file");

        _timelineController.Stop();

        BluetoothHandler.Disconnect();

        if (_timer is not null)
        {
            _timer.Period = Timeout.InfiniteTimeSpan;
        }

        CloseFitFile();

        await InvokeAsync(StateHasChanged);
    }

    private void CloseFitFile()
    {
        if (_fitFileHandler is null)
        {
            Logger.LogInformation("Have already closed the fit file, aborting");

            return;
        }

        var times = _timelineController.Stop();

        _fitFileHandler?.AddLap(System.DateTime.UtcNow, times.LapElapsedTime, times.LapTotalTime);

        _memoryStream = _fitFileHandler?.Close(_timelineController.StartedAt.Value,
            _timelineController.EndedAt.Value,
            _timelineController.TotalTime.TotalSeconds);

        _fitFileHandler?.Dispose();
        _fitFileHandler = null;
    }

    async Task<string> LocateVideoPath()
    {
        var contentItem = await Suffer.ContentCollection.Find(item => item.Id == Content).SingleAsync();

        string fileKey = $"[{contentItem.Id}-{contentItem.WorkoutId}-{contentItem.VideoId}]";

        return System.IO.Path.GetFileName(System.IO.Directory.EnumerateFiles(@"G:\videos", "*.mp4").SingleOrDefault(item => item.Contains(fileKey)) ?? string.Empty);
    }

    protected override bool ShouldRender()
    {
        //return (videoHandler is not null && workoutHandler is not null) || _timelineController.ElapsedTimer.IsRunning;
        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        ContentItem = await Suffer.ContentCollection.Find(item => item.Id == Content).SingleAsync();

        switch (ContentItem.WorkoutType)
        {
            case "Yoga":
                {
                    _sport = Sport.Training;
                    _subSport = SubSport.Yoga;
                    break;
                }
            case "Strength":
                {
                    _sport = Sport.Training;
                    _subSport = SubSport.StrengthTraining;
                    break;
                }
        }

        try
        {
            if (string.IsNullOrEmpty(ContentItem.VideoId))
            {
                Console.WriteLine("Not setting video source: no video id");

                workoutType = WorkoutType.NoVid;

                return;
            }

            await video.SetSrcAsync($"/videos/{ContentItem.VideoId}.mp4");

            var readyState = await video.GetReadyStateAsync();

            do
            {
                Console.WriteLine($"Video doesn't enough data yet: {readyState}");
            } while ((readyState = await video.GetReadyStateAsync()) != Blazored.Video.Support.ReadyState.HAVE_ENOUGH_DATA);

            TotalWorkoutLength = (int)(await video.GetDurationAsync() * 1000);

            Console.WriteLine($"Have total workout length (from video): {TimeSpan.FromSeconds(TotalWorkoutLength)}");
        } catch (Exception setSrcException)
        {
            Logger.LogError($"Unable to set source: {setSrcException.Message}");
            Logger.LogError($"@video = {video}");

            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // TODO: support multiple users, for now, just hard-coding `1`.
        try
        {
            IsAuthenticated = await OAuth.HasAccessToken(1);
        }
        catch { }

        var contentItem = await Suffer.ContentCollection.Find(item => item.Id == Content).SingleAsync();

        ContentName = contentItem.Name;

        var workoutTriggers = contentItem.Workout;

        var videoTriggers = contentItem.Storylines;

        if (videoTriggers is not null && videoTriggers.Count == 1)
        {
            videoHandler = new(videoTriggers[0]);

            _timer = new(Timeout.InfiniteTimeSpan);

            Logger.LogInformation("Started storyline");
        }
        else
        {
            //throw new ArgumentOutOfRangeException("json", $"Invalid number of storylines in JSON. Found {videoTriggers?.Count ?? 0}, expected 1.");
            _timer = new(Timeout.InfiniteTimeSpan);
        }

        // UGH: (some?) Yoga and other videos have workout triggers despite not needing them...?
        if (workoutTriggers is not null && workoutTriggers.Count > 0)
        {
            workoutJson = workoutTriggers;

            BuildWorkoutGraph(workoutJson);

            workoutHandler = new ContentHandler.WorkoutHandler(workoutJson);

            currentTargets = workoutHandler.Targets(0);
        }
        else
        {
            if (workoutType == WorkoutType.NoVid)
            {
                Console.WriteLine("ERROR: NoVid AND NoTargets");
            }

            workoutType = WorkoutType.NoTargets;
        }

        var totalWorkoutLength = workoutJson.SelectMany(root => root.Tracks.Select(track => track.Size)).Sum();

        if (totalWorkoutLength > 0)
            TotalWorkoutLength = totalWorkoutLength;

        // Just testing this out, want to do a few other tests with BLE and various pairing states
        //await BluetoothHandler.ForgetAsync();

        BluetoothHandler.OnChange += async (Utilities.BluetoothHandler.BluetoothData data) =>
        {
            // For HR, 0 is "impossible", so set to null to indicate a problem with sensor
            if (data.HeartRate is int hr) actualHeartRate = hr == 0 ? null : (byte)hr;
            if (data.Cadence is int cadence) actualCadence = (byte)cadence;
            if (data.Power is int power) actualPower = (ushort)power;

            await InvokeAsync(StateHasChanged);
        };

        _timelineController.OnIndexChanged += (int previousIndex, int currentIndex, TimelineController.TimerState timerState) =>
        {
            //Console.WriteLine($"Index changed: {previousIndex} => {currentIndex}");

            if (timerState == TimelineController.TimerState.Playing)
            {
                _fitFileHandler?.AddRecord(System.DateTime.UtcNow, actualHeartRate ?? 0, actualCadence ?? 0, actualPower ?? 0);
            }

            if (GetCurrentTrack(currentIndex * 1000) is (int offset, Track currentTrack) && GetCurrentTrack(previousIndex * 1000) is (int prevOffset, Track previousTrack))
            {
                if (currentTrack != previousTrack)
                {
                    var lapTimes = _timelineController.MarkLap();

                    _fitFileHandler?.AddLap(System.DateTime.UtcNow, lapTimes.LapElapsedTime, lapTimes.LapTotalTime);
                }
            }
        };

        await InvokeAsync(StateHasChanged);
    }

    string FormatColour(IReadOnlyList<double> components)
    {
        int Rgb(double percentage) => (int)(255.0 * percentage);

        if (components.Count == 4)
        {
            return $"rgb({Rgb(components[0])} {Rgb(components[1])} {Rgb(components[2])} / {(int)(components[3] * 100)}%)";
        }
        else
        {
            return $"rgb({Rgb(components[0])} {Rgb(components[1])} {Rgb(components[2])})";
        }
    }

    private (int Offset, Track Track)? GetCurrentTrack(int offset)
    {
        int currentOffset = 0;

        foreach (var root in workoutJson)
        {
            foreach (var track in root.Tracks)
            {
                if (offset >= currentOffset && offset <= currentOffset + track.Size)
                {
                    return (currentOffset, track);
                }

                currentOffset += track.Size;
            }
        }

        return null;
    }

    private async Task UpdateState()
    {
        try
        {
            while (await _timer!.WaitForNextTickAsync())
            {
                if (_disposed)
                    return;

                try
                {
                    _timelineController.Tick();

                    int currentPosition = _timelineController.CurrentMilliseconds;

                    if (_timelineController.IsPaused)
                    {
                        SeekBarPosition = _timelineController.CurrentIndex;
                    }
                    else
                    {
                        SeekBarPosition = (int)_timelineController.TotalTime.TotalSeconds;
                    }

                    currentTargets = workoutHandler?.Targets(currentPosition);
                    upcomingTargets = workoutHandler?.NextTargets(currentPosition);
                    effortChangeObject = workoutHandler?.EffortChangeObject(currentPosition);
                    whip = videoHandler?.Whip(currentPosition);

                    if (workoutHandler?.SoundEffect(currentPosition) is WorkoutParameters workoutSoundEffect)
                    {
                        Logger.LogInformation($"Playing sound effect: {workoutSoundEffect.Key}");

                        await jsRuntime.InvokeVoidAsync("playSoundEffect", workoutSoundEffect.Key);
                    }

                    if (videoHandler?.SoundEffect(currentPosition) is StorylineParameters videoSoundEffect)
                    {
                        await jsRuntime.InvokeVoidAsync("playSoundEffect", videoSoundEffect.Key);
                    }

                    var currentTrack = GetCurrentTrack(currentPosition);

                    try
                    {
                        if (currentTrack is not null)
                        {
                            var elapsed = currentPosition - currentTrack.Value.Offset;
                            trackRemainingTime = TimeSpan.FromMilliseconds(currentTrack.Value.Track.Size - elapsed).Add(TimeSpan.FromSeconds(1));
                        }

                        if (TotalWorkoutLength > currentPosition)
                        {
                            workoutRemainingTime = TimeSpan.FromMilliseconds(TotalWorkoutLength - currentPosition);
                        }
                        else
                        {
                            workoutRemainingTime = TimeSpan.Zero;
                        }

                        percentComplete = ((double)currentPosition * 100) / (double)(TotalWorkoutLength);
                    } catch (Exception exn)
                    {
                        Logger.LogError($"Error trying to update timers: {exn.Message}");
                        Logger.LogError($"Stack trace: {exn.StackTrace}");
                    }

                    var currentUpdate = TimeOnly.FromDateTime(System.DateTime.UtcNow);

                    //int index = (int)Math.Floor(videoTime);
                    int index = (int)Math.Floor(_timelineController.TotalTime.TotalSeconds);

                    // use a loop for when rendering is lagging, ensure the graph always has values...
                    // this is now broken with ability to seek forward/back, so need the absolute index...
                    // and also xyz.Data[ix] could end up being out of range... hmm
                    for (int ix = lastLength + 1; ix <= index; ++ix) {
                        heartRateGraph.AddValue(actualHeartRate ?? 0);
                    }

                    for (int ix = lastLength + 1; ix <= index; ++ix)
                        powerGraph?.AddValue(actualPower ?? 0);

                    for (int ix = lastLength + 1; ix <= index; ++ix)
                        cadenceGraph.AddValue(actualCadence ?? 0);

                    if (index > lastLength)
                    {
                        lastLength = index;
                    }

                    await InvokeAsync(StateHasChanged);
                } catch (Exception innerExn)
                {
                    Logger.LogError($"Derp: {innerExn.Message}");
                }
            }
        }
        catch (OperationCanceledException exn)
        {
            // can we dispose of the timer here?
            Console.WriteLine($"update state has failed: {exn.Message}");
        }
    }

    string FormatTimeSpan(TimeSpan timeSpan)
    {
        if (timeSpan.Hours > 0)
        {
            return timeSpan.ToString(@"h':'mm':'ss");
        }
        else
        {
            return timeSpan.ToString(@"m':'ss");
        }
    }

    private WorkoutItem FromParameters(WorkoutParameters parameters)
    {
        if (AthleteStats is null)
        {
            using var context = DbFactory.CreateDbContext();

            try
            {
                AthleteStats = context.Stats.Where(item => item.Id == 1).SingleOrDefault();
            }
            catch (Exception exn)
            {
                Logger.LogError($"Unable to load athlete stats: {exn.Message}");

                return new(BluetoothLE.Target.FTP, 0);
            }
        }

        if (AthleteStats is null || parameters is null)
            return new(BluetoothLE.Target.FTP, 0);

        if (parameters.Nm is TypedValue<double> nm)
        {
            return new(BluetoothLE.Target.NM, (ushort)(AthleteStats.Nm * nm.Value));
        }
        else if (parameters.Ac is TypedValue<double> ac)
        {
            return new(BluetoothLE.Target.AC, (ushort)(AthleteStats.Ac * ac.Value));
        }
        else if (parameters.Map is TypedValue<double> map)
        {
            return new(BluetoothLE.Target.MAP, (ushort)(AthleteStats.Map * map.Value));
        }
        else if (parameters.Ftp is TypedValue<double> ftp)
        {
            return new(BluetoothLE.Target.FTP, (ushort)(AthleteStats.Ftp * ftp.Value));
        }
        else throw new ArgumentException("Don't have a power target to show");
    }

    private void BuildWorkoutGraph(IReadOnlyList<WorkoutTrigger> workout)
    {
        List<WorkoutItem> workoutValues = [];

        int trackOffset = 0;

        foreach (var section in workout)
        {
            //Console.WriteLine($"Processing section {section.Name}");

            foreach (var track in section.Tracks)
            {
                //Console.WriteLine($"  Processing track of type {track.Type}");

                int size = track.Size;

                if (track.SizeType != "time")
                {
                    //Console.WriteLine($"    Track doesn't have a duration; size type is {track.SizeType}");

                    continue;
                }

                for (int ix = 0; ix < track.Objects.Count; ++ix)
                {
                    var obj = track.Objects[ix];

                    if (obj.Type == StringKeys.Targets)
                    {
                        for (int iy = 0; iy < (obj.Size / 1000); ++iy)
                        {
                            workoutValues.Add(FromParameters(obj.Parameters));
                        }
                    }
                }

                trackOffset += track.Size;
            }
        }

        var maxPower = (int)Math.Ceiling((double)workoutValues.MaxBy(value => value.Value).Value / 10) * 10 + 50;

        workoutBuilder = new GraphBuilder<WorkoutItem>(new WorkoutItemTransformer(), workoutValues.Count, 100, maxPower)
            {
                CreateStroke = false,
                JoinBlocks = false,
                Length = workoutValues.Count
            };

        powerGraph = new SVGLineBuilder(100, "rgb(255 255 255)", maxPower);

        workoutBuilder.Data = workoutValues.ToArray();
    }

    public async ValueTask DisposeAsync()
    {
        if (_disposed)
            return;

        _disposed = true;

        CloseFitFile();

        await BluetoothHandler.ForgetAsync();

        if (_timerTask is not null)
        {
            await _timerTask;
            _timerTask = null;
        }

        _timer?.Dispose();
        _timer = null;
    }

    public async Task UploadAsync()
    {
        CloseFitFile();

        if (_memoryStream is null)
        {
            Logger.LogError($"Nothing to upload, _memoryStream is null!");

            return;
        }

        string externalId = Convert.ToBase64String(System.Security.Cryptography.RandomNumberGenerator.GetBytes(8));
        string sportType = ContentItem.WorkoutType switch
        {
            "Yoga" => "Yoga",
            "Strength" => "Weight Training",
            _ => "Ride"
        };
        string name = ContentItem.WorkoutType switch
        {
            "Yoga" => $"Yoga with Abi: {ContentItem.Name}",
            "Strength" => $"Suffer Strength: {ContentItem.Name}",
            "Cycling" => $"The Sufferfest: {ContentItem.Name}",
            _ => $"Indoor Workout: {ContentItem.Name}"
        };

        await Intervals.UploadAsync(1, name, _memoryStream, externalId);
        await OAuth.UploadAsync(1, name, _memoryStream, externalId, sportType);
    }
}
